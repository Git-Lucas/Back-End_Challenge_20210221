name: .NET CD ECS

on:
  push:
    branches: [ "disable-temporarily" ]
  # workflow_run:
  #   workflows: [".NET CD DOCKER HUB"]
  #   types:
  #     - completed

jobs:
  ecs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Download Amazon ECS task definition
      run: aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json

    - name: Copy task definition
      run: cp task-definition.json task-definition.json.old

    - name: Set application image URI in the task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: Api
        image: dockerlucasoliveira/backendchallenge20210221:latest
        environment-variables: "ASPNETCORE_ENVIRONMENT=ECS"

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE_NAME }}
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true

    - name: Request
      continue-on-error: true
      run: |
        echo "REQUEST=0" >> $GITHUB_ENV
        wget ${{ secrets.ECS_LOAD_BALANCER_DNS }} || echo "REQUEST=1" >> $GITHUB_ENV
    
    - name: Rollback Amazon ECS task definition
      if: ${{ env.REQUEST != 0 }}
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json.old
        service: ${{ secrets.ECS_SERVICE_NAME }}
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true